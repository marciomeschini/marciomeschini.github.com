<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tags on Yet another static website</title>
    <link>https://marciomeschini.github.io/tags/</link>
    <description>Recent content in Tags on Yet another static website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://marciomeschini.github.io/tags/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Hackathon</title>
      <link>https://marciomeschini.github.io/posts/hackathon/</link>
      <pubDate>Sun, 31 Oct 2021 23:36:10 +0000</pubDate>
      
      <guid>https://marciomeschini.github.io/posts/hackathon/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;A while ago me and my team built a small &lt;code&gt;Status Bar&lt;/code&gt; app to intercept deeplinks and to redirect them to both iOS Simulator and Android Emulator. Our mobile app already provides in-depth deeplink support, so the idea came natural: why use deeplink only for marketing?
We can adopt deeplinks also to simplify several internal processes such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;backend environment selection&lt;/li&gt;
&lt;li&gt;enter account credentials&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We were lucky, we won. 🎉&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;target-platform&#34;&gt;Target platform&lt;/h1&gt;
&lt;p&gt;User can choose which platform to open the url with: either both platforms or one between iOS and Android.&lt;/p&gt;
&lt;p&gt;We can use the following enum to model that and pass the values through an array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Platform&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; android
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; iOS
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However we soon discover something:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; platforms: [Platform]
platforms = [.android] 
platforms = [.iOS]

enabledPlatforms = [.android, .iOS, .iOS, .android] &lt;span style=&#34;color:#75715e&#34;&gt;// 1. 🤔&lt;/span&gt;
enabledPlatforms = [] &lt;span style=&#34;color:#75715e&#34;&gt;// 2. 😱&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To fix (1) we can use a &lt;code&gt;Set&lt;/code&gt; in place of an array however in order to address empty set (2) we need something different. We leave this topic for next time as now we want to focus on one specific problem: how to open the link and how to provide a good feedback to the call-site.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s quickly address the &lt;strong&gt;two impossible states&lt;/strong&gt; and introduce a third case to our enum: &lt;code&gt;both&lt;/code&gt;. We closed the gate and client can not send bad requests anymore.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Platform&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; android
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; both
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; iOS
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;platform&#34;&gt;Platform&lt;/h1&gt;
&lt;p&gt;A platform represents an abstraction for both the iOS Simulator and the Android Emulator.&lt;/p&gt;
&lt;p&gt;Behind the scenes we adopt two different tools: &lt;a href=&#34;https://nshipster.com/simctl/&#34;&gt;simctl&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/studio/command-line/adb&#34;&gt;adb&lt;/a&gt; respectively to interact with the two platforms but - for now - let&amp;rsquo;s not worry about these details. Let&amp;rsquo;s try instead to reduce the number of variables.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We know that a user may or may not have a given platform installed, if so we want to return an error.&lt;/li&gt;
&lt;li&gt;Once we have a platform available we want to invoke &lt;code&gt;openURL&lt;/code&gt; on that and eventually we want a result back. So also in that case we may want to return an error to the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Swift provides a standard type for this kind of requirements: the &lt;code&gt;Result&lt;/code&gt; type.
We can add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typealias&lt;/span&gt; DeviceOpen = (URL) -&amp;gt; Result&amp;lt;Void, Error&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 2 &lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handler: () -&amp;gt; Result&amp;lt;DeviceOpen, Error&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;the-controller&#34;&gt;The Controller&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;OpenURLController&lt;/code&gt; object hides the connection to the two platforms and exposes a single API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;URL&lt;/code&gt; to open&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;Platform&lt;/code&gt; configuration, ie which devices to target&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and returns back a &lt;code&gt;Result&lt;/code&gt; type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; url: URL, platform: Platform) -&amp;gt; Result&amp;lt;Void, Error&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Success&lt;/code&gt; value for now can be &lt;code&gt;Void&lt;/code&gt; as we don&amp;rsquo;t need to carry extra information back during this post.&lt;/p&gt;
&lt;p&gt;Every time &lt;code&gt;open&lt;/code&gt; function is called we want to get an handler for the required platform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;something may happen between different executions&lt;/li&gt;
&lt;li&gt;avoid storing states especially if it involves a third party command line tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can break down the amount of possible combinations with some nice ascii art:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(URL, Platform) -&amp;gt; Result
1     3             2
2³ =  8 different paths


+----------+------+------+------+------+
| Platform |      |      |      |      |
+==========+======+======+======+======+
| Android  |   1  |   0  |      |      |
+----------+------+------+------+------+
| iOS      |   1  |   0  |      |      |
+----------+------+------+------+------+
| Both     |  11  |  00  |  10  |  01  |
+----------+------+------+------+------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8 different paths sound like a hell of a job but &lt;code&gt;Result&lt;/code&gt; type comes to the rescue.
We are able to chain the 2 operations: get handler + open(url) with a &lt;code&gt;flatMap&lt;/code&gt;. The rest is done through a couple of &lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t have any special requirement in terms of error handling, we just want to pass them up to the caller.&lt;/p&gt;
&lt;p&gt;The full code is below, I added some comments to track the 8 different paths we do support.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GroupError&lt;/span&gt;: Error {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; errors: [Error]
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenURLController&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;typealias&lt;/span&gt; DeviceOpen = (URL) -&amp;gt; Result&amp;lt;Void, Error&amp;gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; android: () -&amp;gt; Result&amp;lt;DeviceOpen, Error&amp;gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; iOS: () -&amp;gt; Result&amp;lt;DeviceOpen, Error&amp;gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; url: URL, platform: Platform) -&amp;gt; Result&amp;lt;Void, Error&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; platform {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; .android:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; android().flatMap { $0(url) } &lt;span style=&#34;color:#75715e&#34;&gt;// 1, 2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; .both:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (android().flatMap { $0(url) }, iOS().flatMap { $0(url) }) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; (.success, .success):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; .success(()) &lt;span style=&#34;color:#75715e&#34;&gt;// 3&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.failure(iOS), .failure(android)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; .failure(GroupError(errors: [iOS, android])) &lt;span style=&#34;color:#75715e&#34;&gt;// 4&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.failure(error), .success), &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.success, .failure(error)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; .failure(error) &lt;span style=&#34;color:#75715e&#34;&gt;// 5, 6&lt;/span&gt;
      }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; .iOS:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; iOS().flatMap { $0(url) } &lt;span style=&#34;color:#75715e&#34;&gt;// 7, 8&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then take the code for a ride with some old school print oriented debugging.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;OpenURLController( &lt;span style=&#34;color:#75715e&#34;&gt;// 🌧&lt;/span&gt;
  android: { .failure(TestError.device) },                      &lt;span style=&#34;color:#75715e&#34;&gt;// ❌&lt;/span&gt;
  iOS: { .success { &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; .failure(TestError.open) } }           &lt;span style=&#34;color:#75715e&#34;&gt;// ✅ ❌&lt;/span&gt;
).open(url, platform: .both)

OpenURLController( &lt;span style=&#34;color:#75715e&#34;&gt;// 🌧&lt;/span&gt;
 android: { .success { &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; .failure(TestError.open) } },      &lt;span style=&#34;color:#75715e&#34;&gt;// ✅ ❌&lt;/span&gt;
 iOS: { .success { &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; .success(()) } }                       &lt;span style=&#34;color:#75715e&#34;&gt;// ✅ ✅&lt;/span&gt;
).open(url, platform: .both)

OpenURLController( &lt;span style=&#34;color:#75715e&#34;&gt;// ☀️&lt;/span&gt;
  android: { .success { &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; .failure(TestError.open) } },      &lt;span style=&#34;color:#75715e&#34;&gt;// - -&lt;/span&gt;
  iOS: { .success { &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; .success(()) } }                       &lt;span style=&#34;color:#75715e&#34;&gt;// ✅ ✅&lt;/span&gt;
).open(url, platform: .iOS)

..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that was all for today, hope you did enjoy reading :)&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fsharpforfunandprofit.com/rop/&#34;&gt;Railway Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/collections/algebraic-data-types/algebraic-data-types&#34;&gt;Pointfree: Algebraic Data Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    
  </channel>
</rss>
